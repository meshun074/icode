package com.fdmgroup.icode.library.music;

import java.util.ArrayList;
import java.util.List;



import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;

@Repository
public class MusicRepository {

	private List<Music> albumList = new ArrayList<>();

	public MusicRepository(@Qualifier("starterMusicList") List<Music> starterMusicList) {
		super();
		this.albumList = starterMusicList;
	}

	public List<Music> findAll() {
		/*
		 * Return the list of all music that contains the library music catalog
		 */
		return null;
	}

	public Music addAlbum(Album album) {
		/*
		 * Create an object to capture the data passed in as arguments. The album id
		 * should be set and generated by using the generateUniqueId method Save the
		 * album to the library album catalog Return the album that was saved
		 * Return the album that was saved
		 */
		return null;
	}

	public void addRecord(Record record) {
		/*
		 * Create an object using Music as the datatype to capture the data passed in as arguments. The record id
		 * should be set and generated by using the generateUniqueId method Save the
		 * record to the library record catalog 
		 */
	}

	public void deleteAlbumById(Long musicId) {
		/*
		 * Search for an album by id in the library album catalog and delete the album
		 * -use iteration (for loop) to search for an album by id 
		 * 		Or 
		 * -use stream to
		 */

	}

    public Music searchByMusicId(Long musicId) {
		/*
		 * Search for a music by id in the library music catalog 
		 * -use iteration (forloop) to search for a music by id 
		 * 		Or
		 * -use stream to search for a music by id
		 * Return the music or null if the music is not found
		 */
		return null;
    }

	public void updateAlbumDescription(Long musicId, String description) {
		/*
		 * Search for an album by id in the library album catalog and update the album description
		 * -use iteration (for loop) to search for an album by id
		 * 		 Or
		 *  -use stream to search for an album by id 
		 */

	}

	public void updateRecordDescription(Long musicId, String description) {
		/*
		 * Search for a record by id in the library record catalog and update the record description
		 * -use iteration (for loop) to search for a record by id
		 * 		 Or
		 * -use stream to search for a record by id
		 * 
		 */

	}

	public List<Music> searchByArtistName(String artistName) {
		/*
		 * Search for a music by artist name in the library music catalog
		 * -use iteration (for loop) to search for a music by artist name
		 * 		 Or
		 * -use stream to search for a music by artist name
		 * Return the list of music that contains the artist name
		 * Return an empty list if no music is found
		 */
		
		return null;
	}

	public List<Music> searchByGenre(String genre) {
		/*
		 * Search for a music by genre in the library music catalog
		 * -use iteration (for loop) to search for a music by genre
		 * 		 Or
		 * -use stream to search for a music by genre
		 * Return the list of music that contains the genre
		 * Return an empty list if no music is found
		 */
		return null;
	}

	public List<Music> searchByTitle(String title) {
		/*
		 * Search for a music by title in the library music catalog
		 * -use iteration (for loop) to search for a music by title
		 * 		 Or
		 * -use stream to search for a music by title
		 * Return the list of music that contains the title
		 * Return an empty list if no music is found
		 */
		return null;
	}


}
