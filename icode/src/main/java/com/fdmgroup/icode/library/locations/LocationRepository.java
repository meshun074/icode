package com.fdmgroup.icode.library.locations;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;


@Repository
public class LocationRepository {
	
	private List<Location> locationList = new ArrayList<>();
	
	public LocationRepository(@Qualifier("starterLocationsList")List<Location> starterLocationList) {
		super();
		this.locationList = starterLocationList;
	}
	
	public List<Location> findAll(){
		/*
		 * Return the list of all locations that contains the library locations catalog
		 */
		return null;
	}

	public Location save(Location location) {
		/* 
		 * create an object to capture the data passed in as arguments.
		 * the location id should be set and generated by using the generateUniqueId method
		 * Save the location to the library location catalog
		 * Return the location that was saved
		 */
		return null;
	}
	
	public Location updateLocationAddress(Long id, String address) {
		/*
		 * Search for a location by id in the library location catalog and update the location address
		 *  -use iteration (for loop) to search for a location by id
		 * 		 Or
		 * 	-use stream to search for a location by id
		 * Return the updated location or null if the location is not found
		 *
		 */
		return null;
	}
	
	public Location findByLocationId(Long id) {
		/*
		 * Search for a location by id in the library location catalog
		 *  -use iteration (for loop) to search for a location by id
		 * 		 Or
		 * 	-use stream to search for a location by id
		 * Return the location or null if the location is not found
		 */
		return null;
	}

	public List<Location> findByLocationName(String locationName) {
		/*
		 * Search for a location by name in the library location catalog
		 * -use iteration (for loop) to search for a location by name
		 * 		 Or
		 * -use stream to search for a location by name
		 * Return the location or null if the location is not found
		 */
		return null;
	}

	public List<Location> findByPhoneNumber(String phoneNumber) {
		/*
		 * Search for a location by phone number in the library location catalog
		 * -use iteration (for loop) to search for a location by phone number
		 * 		 Or
		 * -use stream to search for a location by phone number
		 * Return the location or null if the location is not found
		 * 
		 */
		return locationList.stream().filter(l -> l.getPhoneNumber().equals(phoneNumber)).collect(Collectors.toList());
	}

	public void deleteLocationById(Long id) {
		/*
		 * Search for a location by id in the library location catalog and delete the location
		 *  -use iteration (for loop) to search for a location by id
		 * 		 Or
		 * 	-use stream to search for a location by id
		 * this method does not return anything (Dangerous method! Handle with care!)
		 */
	}

    public Location searchLocationById(Long locationId) {
		/*
		 * Search for a location by id in the library location catalog
		 * -use iteration (for loop) to search for a location by id
		 * 		 Or
		 * -use stream to search for a location by id
		 * Return the location or null if the location is not found
		 
		 */
		return null;
    }


	



}
