package com.fdmgroup.icode.library.event;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;


@Repository
public class EventRepository {
	
	
	private List<Event> eventsList = new ArrayList<>();
	
	public EventRepository(@Qualifier("starterEventsList")List<Event> events) {
		super();
		this.eventsList = events;
	}



	public List<Event> findAll() {
		/*
		 * Return the list of all events that contains the library events catalog
		 */
		return null;
	}
	
	public Event addEvent(Event event) {
		/*
		 * create an object to capture the data passed in as arguments.
		 * the event id should be set and generated by using the generateUniqueId method
		 * Save the event to the library event catalog
		 * Return the event that was saved
		 */
		return null;
	}
	
	public Event findById(Long id) {
		/*
		 * Search for an event by id in the library event catalog
		 *  -use iteration (for loop) to search for an event by id
		 * 		 Or
		 * 	-use stream to search for an event by id
		 * Return the event or null if the event is not found
		 */
		return null;
	}
	
	public Event updateEventDescription(Long id, String eventDescription) {
		/*
		 * Search for an event by id in the library event catalog and update the event description
		 *   -use iteration (for loop) to search for an event by id
		 * 		 Or
		 * 	-use stream to search for an event by id
		 * Return the updated event or null if the event is not found
		 */
		return null;
	}

	
	public List<Event> findByEventName(String eventName) {
		/*
		 * Search for an event by name in the library event catalog
		 *   -use iteration (for loop) to search for an event by name
		 * 		 Or
		 * 	-use stream to search for an event by name
		 * Return the list of events that match the event name
		 */
		return null;
	}

	public void deleteById(Long id) {
		/*
		 * Search for an event by id in the library event catalog and delete the event
		 *  -use iteration (for loop) to search for an event by id
		 * 		 Or
		 * 	-use stream to search for an event by id
		 * this method does not return anything (Dangerous method! Handle with care!)
		 */
	
	}


	public List<Event> findByEventLocation(String eventLocation) {
		/*
		 * Search for an event by location in the library event catalog
		 *  -use iteration (for loop) to search for an event by location
		 * 		 Or
		 * 	-use stream to search for an event by location
		 * Return the list of events that match the event location
		 * 
		 */
		
		return null;
	}



    public Event updateEventLocation(Long eventId, String eventLocation) {
		/*
		 * Search for an event by id in the library event catalog and update the event location
		 * 	-use iteration (for loop) to search for an event by id
		 * 		 Or
		 * 	-use stream to search for an event by id
		 * Return the updated event or null if the event is not found
		 */
	   return null;
    }







}
